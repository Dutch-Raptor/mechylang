// Mechylang supports rust-like iterators

// Iterators are lazy, and only evaluate when needed

// Map and filter are supported
let a = [1, 2, 3].iter().map(fn(x) { x * 2 }).collect()
print(a) // [2, 4, 6]

let a = [1, 2, 3];
a = a.iter().filter(fn(x) { x % 2 == 0 }).collect()
print(a) // [2]

// Iterators can be infinite
let a = (1..).iter().filter(fn(x) { x % 9 == 0 }).take(6).collect();
print(a) // [9, 18, 27, 36, 45, 54]

// Sum and fold are supported
let a = (1..).iter().filter(fn(x) { x % 9 == 0 }).take(6).sum();
print(a) // 189

let a = (1..).iter().filter(fn(x) { x % 9 == 0 }).take(6).fold(0, fn(sum, x) { sum + x });
print(a) // 189

// you can combine iterator methods to do more complex things
let a = (1..).iter().filter(fn(x) { x % 9 == 0 }).take(6).fold("", fn(acc, x) { acc + x.to_string() });
print(a) // "91827364554"

// let's use iterators to calculage the sum of all primes <= n
let n = 1000;

let sum_primes = fn(n) {
    if n < 2 {
        return 0;
    };
    if n == 2 {
        return 2;
    };
    if n <= 4 {
        return 5;
    };

    (5..=n).iter()
      .step_by(6)
      .fold([2, 3], fn(primes, i) {
          if primes.iter().filter(fn(p) { i % p == 0 }).count() == 0 {
              primes.push(i);
          }

          if i + 2 <= n && primes.iter().filter(fn(p) { (i + 2) % p == 0 }).count() == 0 {
              primes.push(i + 2);
          }
          return primes;
      })
      .iter()
      .sum()
};

print(sum_primes(n)) // 76127

